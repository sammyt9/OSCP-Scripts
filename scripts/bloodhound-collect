#!/usr/bin/env python3

import subprocess
import re
import os
import shutil
import argparse

def run_nxc(ip, user, password, is_hash=False, debug=False):
    # Build the nxc command based on the user inputs
    command = ['nxc', 'ldap', ip, '-u', user, '--bloodhound', '--collection', 'All', '--dns-server', ip]
    
    if is_hash:
        command.append('-H')
        command.append(password)  # If using hash, use -H instead of -p
    else:
        command.append('-p')
        command.append(password)  # If using password, use -p

    # Run the command and capture the output
    if debug:
        print(f"Running command: {' '.join(command)}")

    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        output = result.stdout
        if debug:
            print(output)

        # Extract the path after the "Compressing output into " text
        match = re.search(r"Compressing output into (.+\.zip)", output)
        if match:
            output_path = match.group(1)
            print(f"Output file path: {output_path}")
            # Move the file to the current directory
            if os.path.exists(output_path):
                shutil.move(output_path, 'bloodhound.zip')
                print(f"Moved {output_path} to {os.getcwd()}/bloodhound.zip")
            else:
                print(f"File not found: {output_path}")
        else:
            print("Error: Output path not found in the command output.")

    except subprocess.CalledProcessError as e:
        print(f"Error running command: {e}")
        if debug:
            print(e.stderr)

def main():
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="Run nxc ldap and collect BloodHound data.")
    parser.add_argument('-i', '--ip', required=True, help="Target IP address")
    parser.add_argument('-u', '--user', required=True, help="Username for authentication")
    parser.add_argument('-p', '--password', help="Password for authentication")
    parser.add_argument('-H', '--hash', help="Password hash for authentication (use instead of -p if using hash)")
    parser.add_argument('--debug', action='store_true', help="Enable debug output")

    args = parser.parse_args()

    # Determine if we are using a password or hash
    if args.hash:
        password = args.hash
        is_hash = True
    else:
        password = args.password
        is_hash = False

    if not password:
        print("Error: You must provide either a password or hash using -p or -H.")
        return

    # Run the nxc ldap command
    run_nxc(args.ip, args.user, password, is_hash, args.debug)

if __name__ == '__main__':
    main()

