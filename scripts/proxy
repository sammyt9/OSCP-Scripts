#!/usr/bin/env python3
import argparse
import ipaddress
import os
import shlex
import subprocess
import sys
import tempfile

DEFAULT_CONF_CONTENT = """\
dynamic_chain
proxy_dns
tcp_read_time_out 15000
tcp_connect_time_out 8000
[ProxyList]

"""

def valid_ip(ip):
    try:
        ipaddress.IPv4Address(ip)
        return True
    except ipaddress.AddressValueError:
        return False

def parse_ip_port(value):
    if ':' in value:
        ip, port_str = value.split(':', 1)
        if not valid_ip(ip):
            return None, None
        try:
            port = int(port_str)
        except ValueError:
            return None, None
        return ip, port
    else:
        if valid_ip(value):
            return value, 1080  # default port
        return None, None

def main():
    parser = argparse.ArgumentParser(
        description="Run a command with proxychains and dynamic temp config."
    )
    parser.add_argument("proxy", help="Proxy IP or IP:port")
    parser.add_argument("command", nargs=argparse.REMAINDER, help="Command to run")
    parser.add_argument("--http", action="store_true", help="Use HTTP proxy instead of SOCKS5 (default)")
    parser.add_argument("-u", "--username", help="Proxy auth username")
    parser.add_argument("-p", "--password", help="Proxy auth password")

    args = parser.parse_args()

    if not args.command:
        print("Error: No command specified to run.", file=sys.stderr)
        parser.print_usage()
        sys.exit(1)

    ip, port = parse_ip_port(args.proxy)
    if ip is None or port is None:
        print(f"Invalid proxy IP or port: {args.proxy}", file=sys.stderr)
        parser.print_usage()
        sys.exit(1)

    proxy_type = "http" if args.http else "socks5"
    auth = ""
    if args.username:
        if not args.password:
            print("Password required if username is provided.", file=sys.stderr)
            sys.exit(1)
        auth = f" {args.username} {args.password}"

    # Create temp proxychains config
    with tempfile.NamedTemporaryFile("w", delete=False) as temp_conf:
        temp_conf.write(DEFAULT_CONF_CONTENT)
        temp_conf.write(f"{proxy_type} {ip} {port}{auth}\n")
        temp_conf_path = temp_conf.name

    print(f"Using proxy {ip}:{port} ({proxy_type})")
    print("Command:", " ".join(shlex.quote(arg) for arg in args.command))
    print()

    try:
        # Build the full command with inline env variable assignment
        # Properly escape and join the command arguments
        cmd = f"PROXYCHAINS_CONF_FILE={shlex.quote(temp_conf_path)} proxychains -q {' '.join(shlex.quote(arg) for arg in args.command)}"
        # Run the command in the shell so the inline env var works
        result = subprocess.run(cmd, shell=True)
        sys.exit(result.returncode)
    finally:
        os.unlink(temp_conf_path)

if __name__ == "__main__":
    main()

